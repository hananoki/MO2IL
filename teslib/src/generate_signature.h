static const quint32 AACT = MAKE_SIG( 'A', 'A', 'C', 'T' );
static const quint32 ACHR = MAKE_SIG( 'A', 'C', 'H', 'R' );
static const quint32 ACTI = MAKE_SIG( 'A', 'C', 'T', 'I' );
static const quint32 ADDN = MAKE_SIG( 'A', 'D', 'D', 'N' );
static const quint32 ALCH = MAKE_SIG( 'A', 'L', 'C', 'H' );
static const quint32 AMMO = MAKE_SIG( 'A', 'M', 'M', 'O' );
static const quint32 ANIO = MAKE_SIG( 'A', 'N', 'I', 'O' );
static const quint32 APPA = MAKE_SIG( 'A', 'P', 'P', 'A' );
static const quint32 ARMA = MAKE_SIG( 'A', 'R', 'M', 'A' );
static const quint32 ARMO = MAKE_SIG( 'A', 'R', 'M', 'O' );
static const quint32 ARTO = MAKE_SIG( 'A', 'R', 'T', 'O' );
static const quint32 ASPC = MAKE_SIG( 'A', 'S', 'P', 'C' );
static const quint32 ASTP = MAKE_SIG( 'A', 'S', 'T', 'P' );
static const quint32 AVIF = MAKE_SIG( 'A', 'V', 'I', 'F' );
static const quint32 BOOK = MAKE_SIG( 'B', 'O', 'O', 'K' );
static const quint32 BPTD = MAKE_SIG( 'B', 'P', 'T', 'D' );
static const quint32 CAMS = MAKE_SIG( 'C', 'A', 'M', 'S' );
static const quint32 CELL = MAKE_SIG( 'C', 'E', 'L', 'L' );
static const quint32 CLAS = MAKE_SIG( 'C', 'L', 'A', 'S' );
static const quint32 CLFM = MAKE_SIG( 'C', 'L', 'F', 'M' );
static const quint32 CLMT = MAKE_SIG( 'C', 'L', 'M', 'T' );
static const quint32 COBJ = MAKE_SIG( 'C', 'O', 'B', 'J' );
static const quint32 COLL = MAKE_SIG( 'C', 'O', 'L', 'L' );
static const quint32 CONT = MAKE_SIG( 'C', 'O', 'N', 'T' );
static const quint32 CPTH = MAKE_SIG( 'C', 'P', 'T', 'H' );
static const quint32 CSTY = MAKE_SIG( 'C', 'S', 'T', 'Y' );
static const quint32 DEBR = MAKE_SIG( 'D', 'E', 'B', 'R' );
static const quint32 DIAL = MAKE_SIG( 'D', 'I', 'A', 'L' );
static const quint32 DLBR = MAKE_SIG( 'D', 'L', 'B', 'R' );
static const quint32 DLVW = MAKE_SIG( 'D', 'L', 'V', 'W' );
static const quint32 DOBJ = MAKE_SIG( 'D', 'O', 'B', 'J' );
static const quint32 DOOR = MAKE_SIG( 'D', 'O', 'O', 'R' );
static const quint32 DUAL = MAKE_SIG( 'D', 'U', 'A', 'L' );
static const quint32 ECZN = MAKE_SIG( 'E', 'C', 'Z', 'N' );
static const quint32 EFSH = MAKE_SIG( 'E', 'F', 'S', 'H' );
static const quint32 ENCH = MAKE_SIG( 'E', 'N', 'C', 'H' );
static const quint32 EQUP = MAKE_SIG( 'E', 'Q', 'U', 'P' );
static const quint32 EXPL = MAKE_SIG( 'E', 'X', 'P', 'L' );
static const quint32 EYES = MAKE_SIG( 'E', 'Y', 'E', 'S' );
static const quint32 FACT = MAKE_SIG( 'F', 'A', 'C', 'T' );
static const quint32 FLOR = MAKE_SIG( 'F', 'L', 'O', 'R' );
static const quint32 FLST = MAKE_SIG( 'F', 'L', 'S', 'T' );
static const quint32 FSTP = MAKE_SIG( 'F', 'S', 'T', 'P' );
static const quint32 FSTS = MAKE_SIG( 'F', 'S', 'T', 'S' );
static const quint32 FURN = MAKE_SIG( 'F', 'U', 'R', 'N' );
static const quint32 GLOB = MAKE_SIG( 'G', 'L', 'O', 'B' );
static const quint32 GMST = MAKE_SIG( 'G', 'M', 'S', 'T' );
static const quint32 GRAS = MAKE_SIG( 'G', 'R', 'A', 'S' );
static const quint32 GRUP = MAKE_SIG( 'G', 'R', 'U', 'P' );
static const quint32 HAZD = MAKE_SIG( 'H', 'A', 'Z', 'D' );
static const quint32 HDPT = MAKE_SIG( 'H', 'D', 'P', 'T' );
static const quint32 IDLE = MAKE_SIG( 'I', 'D', 'L', 'E' );
static const quint32 IDLM = MAKE_SIG( 'I', 'D', 'L', 'M' );
static const quint32 IMAD = MAKE_SIG( 'I', 'M', 'A', 'D' );
static const quint32 IMGS = MAKE_SIG( 'I', 'M', 'G', 'S' );
static const quint32 INFO = MAKE_SIG( 'I', 'N', 'F', 'O' );
static const quint32 INGR = MAKE_SIG( 'I', 'N', 'G', 'R' );
static const quint32 IPCT = MAKE_SIG( 'I', 'P', 'C', 'T' );
static const quint32 IPDS = MAKE_SIG( 'I', 'P', 'D', 'S' );
static const quint32 KEYM = MAKE_SIG( 'K', 'E', 'Y', 'M' );
static const quint32 KYWD = MAKE_SIG( 'K', 'Y', 'W', 'D' );
static const quint32 LAND = MAKE_SIG( 'L', 'A', 'N', 'D' );
static const quint32 LCRT = MAKE_SIG( 'L', 'C', 'R', 'T' );
static const quint32 LCTN = MAKE_SIG( 'L', 'C', 'T', 'N' );
static const quint32 LGTM = MAKE_SIG( 'L', 'G', 'T', 'M' );
static const quint32 LIGH = MAKE_SIG( 'L', 'I', 'G', 'H' );
static const quint32 LSCR = MAKE_SIG( 'L', 'S', 'C', 'R' );
static const quint32 LTEX = MAKE_SIG( 'L', 'T', 'E', 'X' );
static const quint32 LVLI = MAKE_SIG( 'L', 'V', 'L', 'I' );
static const quint32 LVLN = MAKE_SIG( 'L', 'V', 'L', 'N' );
static const quint32 LVSP = MAKE_SIG( 'L', 'V', 'S', 'P' );
static const quint32 MATO = MAKE_SIG( 'M', 'A', 'T', 'O' );
static const quint32 MATT = MAKE_SIG( 'M', 'A', 'T', 'T' );
static const quint32 MESG = MAKE_SIG( 'M', 'E', 'S', 'G' );
static const quint32 MGEF = MAKE_SIG( 'M', 'G', 'E', 'F' );
static const quint32 MISC = MAKE_SIG( 'M', 'I', 'S', 'C' );
static const quint32 MOVT = MAKE_SIG( 'M', 'O', 'V', 'T' );
static const quint32 MSTT = MAKE_SIG( 'M', 'S', 'T', 'T' );
static const quint32 MUSC = MAKE_SIG( 'M', 'U', 'S', 'C' );
static const quint32 MUST = MAKE_SIG( 'M', 'U', 'S', 'T' );
static const quint32 NAVI = MAKE_SIG( 'N', 'A', 'V', 'I' );
static const quint32 NAVM = MAKE_SIG( 'N', 'A', 'V', 'M' );
static const quint32 NOTE = MAKE_SIG( 'N', 'O', 'T', 'E' );
static const quint32 NPC_ = MAKE_SIG( 'N', 'P', 'C', '_' );
static const quint32 OTFT = MAKE_SIG( 'O', 'T', 'F', 'T' );
static const quint32 PACK = MAKE_SIG( 'P', 'A', 'C', 'K' );
static const quint32 PERK = MAKE_SIG( 'P', 'E', 'R', 'K' );
static const quint32 PGRE = MAKE_SIG( 'P', 'G', 'R', 'E' );
static const quint32 PHZD = MAKE_SIG( 'P', 'H', 'Z', 'D' );
static const quint32 PROJ = MAKE_SIG( 'P', 'R', 'O', 'J' );
static const quint32 QUST = MAKE_SIG( 'Q', 'U', 'S', 'T' );
static const quint32 RACE = MAKE_SIG( 'R', 'A', 'C', 'E' );
static const quint32 REFR = MAKE_SIG( 'R', 'E', 'F', 'R' );
static const quint32 REGN = MAKE_SIG( 'R', 'E', 'G', 'N' );
static const quint32 RELA = MAKE_SIG( 'R', 'E', 'L', 'A' );
static const quint32 REVB = MAKE_SIG( 'R', 'E', 'V', 'B' );
static const quint32 RFCT = MAKE_SIG( 'R', 'F', 'C', 'T' );
static const quint32 SCEN = MAKE_SIG( 'S', 'C', 'E', 'N' );
static const quint32 SCRL = MAKE_SIG( 'S', 'C', 'R', 'L' );
static const quint32 SHOU = MAKE_SIG( 'S', 'H', 'O', 'U' );
static const quint32 SLGM = MAKE_SIG( 'S', 'L', 'G', 'M' );
static const quint32 SMBN = MAKE_SIG( 'S', 'M', 'B', 'N' );
static const quint32 SMEN = MAKE_SIG( 'S', 'M', 'E', 'N' );
static const quint32 SMQN = MAKE_SIG( 'S', 'M', 'Q', 'N' );
static const quint32 SNCT = MAKE_SIG( 'S', 'N', 'C', 'T' );
static const quint32 SNDR = MAKE_SIG( 'S', 'N', 'D', 'R' );
static const quint32 SOPM = MAKE_SIG( 'S', 'O', 'P', 'M' );
static const quint32 SOUN = MAKE_SIG( 'S', 'O', 'U', 'N' );
static const quint32 SPEL = MAKE_SIG( 'S', 'P', 'E', 'L' );
static const quint32 SPGD = MAKE_SIG( 'S', 'P', 'G', 'D' );
static const quint32 STAT = MAKE_SIG( 'S', 'T', 'A', 'T' );
static const quint32 TACT = MAKE_SIG( 'T', 'A', 'C', 'T' );
static const quint32 TES4 = MAKE_SIG( 'T', 'E', 'S', '4' );
static const quint32 TREE = MAKE_SIG( 'T', 'R', 'E', 'E' );
static const quint32 TXST = MAKE_SIG( 'T', 'X', 'S', 'T' );
static const quint32 VTYP = MAKE_SIG( 'V', 'T', 'Y', 'P' );
static const quint32 WATR = MAKE_SIG( 'W', 'A', 'T', 'R' );
static const quint32 WEAP = MAKE_SIG( 'W', 'E', 'A', 'P' );
static const quint32 WOOP = MAKE_SIG( 'W', 'O', 'O', 'P' );
static const quint32 WRLD = MAKE_SIG( 'W', 'R', 'L', 'D' );
static const quint32 WTHR = MAKE_SIG( 'W', 'T', 'H', 'R' );
static const quint32 AECH = MAKE_SIG( 'A', 'E', 'C', 'H' );
static const quint32 AMDL = MAKE_SIG( 'A', 'M', 'D', 'L' );
static const quint32 AORU = MAKE_SIG( 'A', 'O', 'R', 'U' );
static const quint32 BNDS = MAKE_SIG( 'B', 'N', 'D', 'S' );
static const quint32 CMPO = MAKE_SIG( 'C', 'M', 'P', 'O' );
static const quint32 DFOB = MAKE_SIG( 'D', 'F', 'O', 'B' );
static const quint32 DMGT = MAKE_SIG( 'D', 'M', 'G', 'T' );
static const quint32 GDRY = MAKE_SIG( 'G', 'D', 'R', 'Y' );
static const quint32 INNR = MAKE_SIG( 'I', 'N', 'N', 'R' );
static const quint32 KSSM = MAKE_SIG( 'K', 'S', 'S', 'M' );
static const quint32 LAYR = MAKE_SIG( 'L', 'A', 'Y', 'R' );
static const quint32 LENS = MAKE_SIG( 'L', 'E', 'N', 'S' );
static const quint32 MSWP = MAKE_SIG( 'M', 'S', 'W', 'P' );
static const quint32 NOCM = MAKE_SIG( 'N', 'O', 'C', 'M' );
static const quint32 OMOD = MAKE_SIG( 'O', 'M', 'O', 'D' );
static const quint32 OVIS = MAKE_SIG( 'O', 'V', 'I', 'S' );
static const quint32 PKIN = MAKE_SIG( 'P', 'K', 'I', 'N' );
static const quint32 RFGP = MAKE_SIG( 'R', 'F', 'G', 'P' );
static const quint32 SCCO = MAKE_SIG( 'S', 'C', 'C', 'O' );
static const quint32 SCOL = MAKE_SIG( 'S', 'C', 'O', 'L' );
static const quint32 SCSN = MAKE_SIG( 'S', 'C', 'S', 'N' );
static const quint32 STAG = MAKE_SIG( 'S', 'T', 'A', 'G' );
static const quint32 TERM = MAKE_SIG( 'T', 'E', 'R', 'M' );
static const quint32 TRNS = MAKE_SIG( 'T', 'R', 'N', 'S' );
static const quint32 ZOOM = MAKE_SIG( 'Z', 'O', 'O', 'M' );
static const quint32 ALOC = MAKE_SIG( 'A', 'L', 'O', 'C' );
static const quint32 AMEF = MAKE_SIG( 'A', 'M', 'E', 'F' );
static const quint32 CCRD = MAKE_SIG( 'C', 'C', 'R', 'D' );
static const quint32 CDCK = MAKE_SIG( 'C', 'D', 'C', 'K' );
static const quint32 CHAL = MAKE_SIG( 'C', 'H', 'A', 'L' );
static const quint32 CHIP = MAKE_SIG( 'C', 'H', 'I', 'P' );
static const quint32 CMNY = MAKE_SIG( 'C', 'M', 'N', 'Y' );
static const quint32 CREA = MAKE_SIG( 'C', 'R', 'E', 'A' );
static const quint32 CSNO = MAKE_SIG( 'C', 'S', 'N', 'O' );
static const quint32 DEHY = MAKE_SIG( 'D', 'E', 'H', 'Y' );
static const quint32 HAIR = MAKE_SIG( 'H', 'A', 'I', 'R' );
static const quint32 HUNG = MAKE_SIG( 'H', 'U', 'N', 'G' );
static const quint32 IMOD = MAKE_SIG( 'I', 'M', 'O', 'D' );
static const quint32 LSCT = MAKE_SIG( 'L', 'S', 'C', 'T' );
static const quint32 LVLC = MAKE_SIG( 'L', 'V', 'L', 'C' );
static const quint32 MICN = MAKE_SIG( 'M', 'I', 'C', 'N' );
static const quint32 MSET = MAKE_SIG( 'M', 'S', 'E', 'T' );
static const quint32 PWAT = MAKE_SIG( 'P', 'W', 'A', 'T' );
static const quint32 RADS = MAKE_SIG( 'R', 'A', 'D', 'S' );
static const quint32 RCCT = MAKE_SIG( 'R', 'C', 'C', 'T' );
static const quint32 RCPE = MAKE_SIG( 'R', 'C', 'P', 'E' );
static const quint32 REPU = MAKE_SIG( 'R', 'E', 'P', 'U' );
static const quint32 RGDL = MAKE_SIG( 'R', 'G', 'D', 'L' );
static const quint32 SCPT = MAKE_SIG( 'S', 'C', 'P', 'T' );
static const quint32 SLPD = MAKE_SIG( 'S', 'L', 'P', 'D' );
static const quint32 CLDC = MAKE_SIG( 'C', 'L', 'D', 'C' );
static const quint32 VOLI = MAKE_SIG( 'V', 'O', 'L', 'I' );
static const quint32 ACBS = MAKE_SIG( 'A', 'C', 'B', 'S' );
static const quint32 ANAM = MAKE_SIG( 'A', 'N', 'A', 'M' );
static const quint32 AIDT = MAKE_SIG( 'A', 'I', 'D', 'T' );
static const quint32 BAMT = MAKE_SIG( 'B', 'A', 'M', 'T' );
static const quint32 BIDS = MAKE_SIG( 'B', 'I', 'D', 'S' );
static const quint32 BNAM = MAKE_SIG( 'B', 'N', 'A', 'M' );
static const quint32 CNAM = MAKE_SIG( 'C', 'N', 'A', 'M' );
static const quint32 DNAM = MAKE_SIG( 'D', 'N', 'A', 'M' );
static const quint32 DATA = MAKE_SIG( 'D', 'A', 'T', 'A' );
static const quint32 DESC = MAKE_SIG( 'D', 'E', 'S', 'C' );
static const quint32 DEST = MAKE_SIG( 'D', 'E', 'S', 'T' );
static const quint32 DMDL = MAKE_SIG( 'D', 'M', 'D', 'L' );
static const quint32 CNTO = MAKE_SIG( 'C', 'N', 'T', 'O' );
static const quint32 CRDT = MAKE_SIG( 'C', 'R', 'D', 'T' );
static const quint32 CTDA = MAKE_SIG( 'C', 'T', 'D', 'A' );
static const quint32 DSTD = MAKE_SIG( 'D', 'S', 'T', 'D' );
static const quint32 DSTF = MAKE_SIG( 'D', 'S', 'T', 'F' );
static const quint32 EAMT = MAKE_SIG( 'E', 'A', 'M', 'T' );
static const quint32 EDID = MAKE_SIG( 'E', 'D', 'I', 'D' );
static const quint32 EITM = MAKE_SIG( 'E', 'I', 'T', 'M' );
static const quint32 ENAM = MAKE_SIG( 'E', 'N', 'A', 'M' );
static const quint32 ETYP = MAKE_SIG( 'E', 'T', 'Y', 'P' );
static const quint32 FGGS = MAKE_SIG( 'F', 'G', 'G', 'S' );
static const quint32 FGGA = MAKE_SIG( 'F', 'G', 'G', 'A' );
static const quint32 FGTS = MAKE_SIG( 'F', 'G', 'T', 'S' );
static const quint32 FNAM = MAKE_SIG( 'F', 'N', 'A', 'M' );
static const quint32 FULL = MAKE_SIG( 'F', 'U', 'L', 'L' );
static const quint32 FVPA = MAKE_SIG( 'F', 'V', 'P', 'A' );
static const quint32 HCLR = MAKE_SIG( 'H', 'C', 'L', 'R' );
static const quint32 HEDR = MAKE_SIG( 'H', 'E', 'D', 'R' );
static const quint32 HNAM = MAKE_SIG( 'H', 'N', 'A', 'M' );
static const quint32 ICON = MAKE_SIG( 'I', 'C', 'O', 'N' );
static const quint32 INAM = MAKE_SIG( 'I', 'N', 'A', 'M' );
static const quint32 INTV = MAKE_SIG( 'I', 'N', 'T', 'V' );
static const quint32 INCC = MAKE_SIG( 'I', 'N', 'C', 'C' );
static const quint32 KSIZ = MAKE_SIG( 'K', 'S', 'I', 'Z' );
static const quint32 KWDA = MAKE_SIG( 'K', 'W', 'D', 'A' );
static const quint32 LNAM = MAKE_SIG( 'L', 'N', 'A', 'M' );
static const quint32 MAST = MAKE_SIG( 'M', 'A', 'S', 'T' );
static const quint32 MDOB = MAKE_SIG( 'M', 'D', 'O', 'B' );
static const quint32 MODL = MAKE_SIG( 'M', 'O', 'D', 'L' );
static const quint32 MODT = MAKE_SIG( 'M', 'O', 'D', 'T' );
static const quint32 MNAM = MAKE_SIG( 'M', 'N', 'A', 'M' );
static const quint32 MICO = MAKE_SIG( 'M', 'I', 'C', 'O' );
static const quint32 MODS = MAKE_SIG( 'M', 'O', 'D', 'S' );
static const quint32 MODD = MAKE_SIG( 'M', 'O', 'D', 'D' );
static const quint32 NAM1 = MAKE_SIG( 'N', 'A', 'M', '1' );
static const quint32 NAM2 = MAKE_SIG( 'N', 'A', 'M', '2' );
static const quint32 NAM3 = MAKE_SIG( 'N', 'A', 'M', '3' );
static const quint32 NAM4 = MAKE_SIG( 'N', 'A', 'M', '4' );
static const quint32 NAM5 = MAKE_SIG( 'N', 'A', 'M', '5' );
static const quint32 NAM6 = MAKE_SIG( 'N', 'A', 'M', '6' );
static const quint32 NAM7 = MAKE_SIG( 'N', 'A', 'M', '7' );
static const quint32 NAM8 = MAKE_SIG( 'N', 'A', 'M', '8' );
static const quint32 NAM9 = MAKE_SIG( 'N', 'A', 'M', '9' );
static const quint32 OBND = MAKE_SIG( 'O', 'B', 'N', 'D' );
static const quint32 ONAM = MAKE_SIG( 'O', 'N', 'A', 'M' );
static const quint32 PNAM = MAKE_SIG( 'P', 'N', 'A', 'M' );
static const quint32 RNAM = MAKE_SIG( 'R', 'N', 'A', 'M' );
static const quint32 SCHR = MAKE_SIG( 'S', 'C', 'H', 'R' );
static const quint32 SCDA = MAKE_SIG( 'S', 'C', 'D', 'A' );
static const quint32 SCRN = MAKE_SIG( 'S', 'C', 'R', 'N' );
static const quint32 SCRI = MAKE_SIG( 'S', 'C', 'R', 'I' );
static const quint32 SCRO = MAKE_SIG( 'S', 'C', 'R', 'O' );
static const quint32 SCTX = MAKE_SIG( 'S', 'C', 'T', 'X' );
static const quint32 SCVR = MAKE_SIG( 'S', 'C', 'V', 'R' );
static const quint32 SLSD = MAKE_SIG( 'S', 'L', 'S', 'D' );
static const quint32 SNAM = MAKE_SIG( 'S', 'N', 'A', 'M' );
static const quint32 SOUL = MAKE_SIG( 'S', 'O', 'U', 'L' );
static const quint32 SLCP = MAKE_SIG( 'S', 'L', 'C', 'P' );
static const quint32 TNAM = MAKE_SIG( 'T', 'N', 'A', 'M' );
static const quint32 TPLT = MAKE_SIG( 'T', 'P', 'L', 'T' );
static const quint32 WNAM = MAKE_SIG( 'W', 'N', 'A', 'M' );
static const quint32 VNAM = MAKE_SIG( 'V', 'N', 'A', 'M' );
static const quint32 VTCK = MAKE_SIG( 'V', 'T', 'C', 'K' );
static const quint32 YNAM = MAKE_SIG( 'Y', 'N', 'A', 'M' );
static const quint32 ZNAM = MAKE_SIG( 'Z', 'N', 'A', 'M' );
static void initIDName( QHash<quint32, QString>& names ) {
	names.insert( AACT, "Action" );
	names.insert( ACHR, "Actor Reference" );
	names.insert( ACTI, "Activator" );
	names.insert( ADDN, "Addon Node" );
	names.insert( ALCH, "Ingestible" );
	names.insert( AMMO, "Ammunition" );
	names.insert( ANIO, "Animated Object" );
	names.insert( APPA, "Alchemical Apparatus" );
	names.insert( ARMA, "Armor Addon" );
	names.insert( ARMO, "Armor" );
	names.insert( ARTO, "Art Object" );
	names.insert( ASPC, "Acoustic Space" );
	names.insert( ASTP, "Association Type" );
	names.insert( AVIF, "Actor Values Infomation" );
	names.insert( BOOK, "Book" );
	names.insert( BPTD, "Body Part Data" );
	names.insert( CAMS, "Camera Shot" );
	names.insert( CELL, "Cell" );
	names.insert( CLAS, "Class" );
	names.insert( CLFM, "Color" );
	names.insert( CLMT, "Climate" );
	names.insert( COBJ, "Constructible Object" );
	names.insert( COLL, "Collision Layer" );
	names.insert( CONT, "Container" );
	names.insert( CPTH, "Camera Path" );
	names.insert( CSTY, "Combat Style" );
	names.insert( DEBR, "Debris" );
	names.insert( DIAL, "Dialog Topic" );
	names.insert( DLBR, "Dialog Branch" );
	names.insert( DLVW, "Dialog View" );
	names.insert( DOBJ, "Default Object Manager" );
	names.insert( DOOR, "Door" );
	names.insert( DUAL, "Dual Cast Data" );
	names.insert( ECZN, "Encounter Zone" );
	names.insert( EFSH, "Effect Shader" );
	names.insert( ENCH, "Object Effect" );
	names.insert( EQUP, "Equip Type" );
	names.insert( EXPL, "Explosion" );
	names.insert( EYES, "Eyes" );
	names.insert( FACT, "Faction" );
	names.insert( FLOR, "Flora" );
	names.insert( FLST, "FormID List" );
	names.insert( FSTP, "Footstep" );
	names.insert( FSTS, "Footstep Set" );
	names.insert( FURN, "Furniture" );
	names.insert( GLOB, "Global" );
	names.insert( GMST, "Game Setting" );
	names.insert( GRAS, "Grass" );
	names.insert( GRUP, "Form Group" );
	names.insert( HAZD, "Hazard" );
	names.insert( HDPT, "Head Part" );
	names.insert( IDLE, "Idle Animation" );
	names.insert( IDLM, "Idle Marker" );
	names.insert( IMAD, "Image Space Adapter" );
	names.insert( IMGS, "Image Space" );
	names.insert( INFO, "Dialog Topic Info" );
	names.insert( INGR, "Ingredient" );
	names.insert( IPCT, "Impact" );
	names.insert( IPDS, "Impact Data Set" );
	names.insert( KEYM, "Key" );
	names.insert( KYWD, "Keyword" );
	names.insert( LAND, "Landscape" );
	names.insert( LCRT, "Location Reference Type" );
	names.insert( LCTN, "Location" );
	names.insert( LGTM, "Lighting Template" );
	names.insert( LIGH, "Light" );
	names.insert( LSCR, "Load Screen" );
	names.insert( LTEX, "Landscape Texture" );
	names.insert( LVLI, "Leveled Item" );
	names.insert( LVLN, "Leveled NPC" );
	names.insert( LVSP, "Leveled Spell" );
	names.insert( MATO, "Material Object" );
	names.insert( MATT, "Material Type" );
	names.insert( MESG, "Message" );
	names.insert( MGEF, "Magic Effect" );
	names.insert( MISC, "Misc. Item" );
	names.insert( MOVT, "Movement Type" );
	names.insert( MSTT, "Moveable Static" );
	names.insert( MUSC, "Music Type" );
	names.insert( MUST, "Music Track" );
	names.insert( NAVI, "Navigation Mesh Info Map" );
	names.insert( NAVM, "NavMesh" );
	names.insert( NOTE, "Note" );
	names.insert( NPC_, "Non Player Character (Actor)" );
	names.insert( OTFT, "Outfit" );
	names.insert( PACK, "Package" );
	names.insert( PERK, "Perk" );
	names.insert( PGRE, "Placed grenade" );
	names.insert( PHZD, "Placed hazard" );
	names.insert( PROJ, "Projectile" );
	names.insert( QUST, "Quest" );
	names.insert( RACE, "Race" );
	names.insert( REFR, "Object Reference" );
	names.insert( REGN, "Region" );
	names.insert( RELA, "Relationship" );
	names.insert( REVB, "Reverb Parameters" );
	names.insert( RFCT, "Visual Effect" );
	names.insert( SCEN, "Scene" );
	names.insert( SCRL, "Scroll" );
	names.insert( SHOU, "Shout" );
	names.insert( SLGM, "Soul Gem" );
	names.insert( SMBN, "Story Manager Branch Node" );
	names.insert( SMEN, "Story Manager Event Node" );
	names.insert( SMQN, "Story Manager Quest Node" );
	names.insert( SNCT, "Sound Category" );
	names.insert( SNDR, "Sound Descriptor" );
	names.insert( SOPM, "Sound Output Model" );
	names.insert( SOUN, "Sound Marker" );
	names.insert( SPEL, "Spell" );
	names.insert( SPGD, "Shader Particle Geometry" );
	names.insert( STAT, "Static" );
	names.insert( TACT, "Talking Activator" );
	names.insert( TES4, "Plugin info / Header" );
	names.insert( TREE, "Tree" );
	names.insert( TXST, "Texture Set" );
	names.insert( VTYP, "Voice Type" );
	names.insert( WATR, "Water" );
	names.insert( WEAP, "Weapon" );
	names.insert( WOOP, "Word of Power" );
	names.insert( WRLD, "Worldspace" );
	names.insert( WTHR, "Weather" );
	names.insert( AECH, "Audio Effect Chain" );
	names.insert( AMDL, "Aim Model" );
	names.insert( AORU, "Attraction Rule" );
	names.insert( BNDS, "Bendable Spline" );
	names.insert( CMPO, "Component" );
	names.insert( DFOB, "Default Object" );
	names.insert( DMGT, "Damage Type" );
	names.insert( GDRY, "God Rays" );
	names.insert( INNR, "Instance Naming Rules" );
	names.insert( KSSM, "Sound Keyword Mapping" );
	names.insert( LAYR, "Layer" );
	names.insert( LENS, "Lens Flare" );
	names.insert( MSWP, "Material Swap" );
	names.insert( NOCM, "Navigation Mesh Obstacle Manager" );
	names.insert( OMOD, "Object Modification" );
	names.insert( OVIS, "Object Visibility Manager" );
	names.insert( PKIN, "Pack-In" );
	names.insert( RFGP, "Reference Group" );
	names.insert( SCCO, "Scene Collection" );
	names.insert( SCOL, "Static Collection" );
	names.insert( SCSN, "Audio Category Snapshot" );
	names.insert( STAG, "Animation Sound Tag Set" );
	names.insert( TERM, "Terminal" );
	names.insert( TRNS, "Transform" );
	names.insert( ZOOM, "Zoom" );
	names.insert( ALOC, "Media Location Controller" );
	names.insert( AMEF, "Ammo Effect" );
	names.insert( CCRD, "Caravan Card" );
	names.insert( CDCK, "Caravan Deck" );
	names.insert( CHAL, "Challenge" );
	names.insert( CHIP, "Casino Chip" );
	names.insert( CMNY, "Caravan Money" );
	names.insert( CREA, "Creature" );
	names.insert( CSNO, "Casino" );
	names.insert( DEHY, "Dehydration Stage" );
	names.insert( HAIR, "Hair" );
	names.insert( HUNG, "Hunger Stage" );
	names.insert( IMOD, "Item Mod" );
	names.insert( LSCT, "Load Screen Type" );
	names.insert( LVLC, "Leveled Creture" );
	names.insert( MICN, "Menu Icon" );
	names.insert( MSET, "Media Set" );
	names.insert( PWAT, "Placeable Water" );
	names.insert( RADS, "Radiatioon Stage" );
	names.insert( RCCT, "Recipe Category" );
	names.insert( RCPE, "Recipe" );
	names.insert( REPU, "Reputation" );
	names.insert( RGDL, "Ragdoll" );
	names.insert( SCPT, "Script" );
	names.insert( SLPD, "Sleep Deprivation Stage" );
	names.insert( CLDC, "CLDC" );
	names.insert( VOLI, "Volumetric Lighting" );
	names.insert( ACBS, "Configuration" );
	names.insert( ANAM, "" );
	names.insert( AIDT, "AI Data" );
	names.insert( BAMT, "Alternate Block Material" );
	names.insert( BIDS, "Block Bash Impact Data Set" );
	names.insert( BNAM, "" );
	names.insert( CNAM, "" );
	names.insert( DNAM, "" );
	names.insert( DATA, "DATA" );
	names.insert( DESC, "Description" );
	names.insert( DEST, "" );
	names.insert( DMDL, "Model FileName" );
	names.insert( CNTO, "Item" );
	names.insert( CRDT, "Critical Data" );
	names.insert( CTDA, "" );
	names.insert( DSTD, "" );
	names.insert( DSTF, "" );
	names.insert( EAMT, "Unarmed Attack Animation" );
	names.insert( EDID, "Editor ID" );
	names.insert( EITM, "Unarmed Attack Effect" );
	names.insert( ENAM, "" );
	names.insert( ETYP, "Equipment Type" );
	names.insert( FGGS, "FaceGEn Geometry-Symmetric" );
	names.insert( FGGA, "FaceGen Geometry-Asymmetric" );
	names.insert( FGTS, "FaceGen Texture-Symmetric" );
	names.insert( FNAM, "" );
	names.insert( FULL, "Name" );
	names.insert( FVPA, "" );
	names.insert( HCLR, "Hair Color" );
	names.insert( HEDR, "Header" );
	names.insert( HNAM, "" );
	names.insert( ICON, "Large Icon FileName" );
	names.insert( INAM, "" );
	names.insert( INTV, "" );
	names.insert( INCC, "" );
	names.insert( KSIZ, "Keyword Count" );
	names.insert( KWDA, "Keywords" );
	names.insert( LNAM, "" );
	names.insert( MAST, "FileName" );
	names.insert( MDOB, "Menu Display Object" );
	names.insert( MODL, "Model FileName" );
	names.insert( MODT, "" );
	names.insert( MNAM, "" );
	names.insert( MICO, "Small Icon FileName" );
	names.insert( MODS, "Alternate Textures" );
	names.insert( MODD, "FaceGen Model Flags" );
	names.insert( NAM1, "" );
	names.insert( NAM2, "" );
	names.insert( NAM3, "" );
	names.insert( NAM4, "" );
	names.insert( NAM5, "" );
	names.insert( NAM6, "" );
	names.insert( NAM7, "" );
	names.insert( NAM8, "" );
	names.insert( NAM9, "" );
	names.insert( OBND, "Object Bounds" );
	names.insert( ONAM, "" );
	names.insert( PNAM, "" );
	names.insert( RNAM, "" );
	names.insert( SCHR, "Basic Script Data" );
	names.insert( SCDA, "Compiled Script" );
	names.insert( SCRN, "Screenshot" );
	names.insert( SCRI, "Script" );
	names.insert( SCRO, "Global Reference" );
	names.insert( SCTX, "Script Source" );
	names.insert( SCVR, "Name" );
	names.insert( SLSD, "Local Variable Data" );
	names.insert( SNAM, "" );
	names.insert( SOUL, "Contained Soul" );
	names.insert( SLCP, "Maximum Capacity" );
	names.insert( TNAM, "" );
	names.insert( TPLT, "Template" );
	names.insert( WNAM, "" );
	names.insert( VNAM, "" );
	names.insert( VTCK, "Voice" );
	names.insert( YNAM, "" );
	names.insert( ZNAM, "" );
}
